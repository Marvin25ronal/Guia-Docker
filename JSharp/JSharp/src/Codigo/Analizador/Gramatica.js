/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
export var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,12],$V5=[1,16],$V6=[1,17],$V7=[1,18],$V8=[1,20],$V9=[1,14],$Va=[1,15],$Vb=[5,18,31,34,36,37,40,42,43,44,97,100],$Vc=[1,30],$Vd=[18,27],$Ve=[2,76],$Vf=[1,42],$Vg=[5,8,18,31,34,36,37,40,42,43,44,97,100],$Vh=[5,8,11,18,25,31,34,36,37,40,42,43,44,78,81,83,85,86,87,88,93,94,95,97,98,100],$Vi=[2,68],$Vj=[1,61],$Vk=[1,60],$Vl=[1,58],$Vm=[1,59],$Vn=[1,62],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,69],$Vu=[1,71],$Vv=[1,84],$Vw=[1,83],$Vx=[1,85],$Vy=[1,86],$Vz=[1,87],$VA=[1,88],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,92],$VF=[1,93],$VG=[1,94],$VH=[1,95],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,103],$VM=[1,104],$VN=[1,105],$VO=[1,106],$VP=[5,8,11,18,25,28,30,31,34,36,37,40,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,78,81,83,84,85,86,87,88,93,94,95,97,98,100],$VQ=[1,110],$VR=[1,111],$VS=[1,112],$VT=[1,119],$VU=[25,27],$VV=[5,8,11,18,19,25,28,30,31,34,36,37,40,42,43,44,45,46,47,48,49,50,51,53,54,55,56,57,58,59,60,61,78,81,83,84,85,86,87,88,93,94,95,97,98,100],$VW=[11,25],$VX=[1,161],$VY=[1,163],$VZ=[1,173],$V_=[1,175],$V$=[1,174],$V01=[1,176],$V11=[1,177],$V21=[1,169],$V31=[1,170],$V41=[1,171],$V51=[1,172],$V61=[5,8,11,18,25,28,30,31,34,36,37,40,42,43,44,45,46,48,53,54,55,56,57,58,59,60,61,78,81,83,84,85,86,87,88,93,94,95,97,98,100],$V71=[5,8,11,18,25,28,30,31,34,36,37,40,42,43,44,45,46,48,49,50,51,53,54,55,56,57,58,59,60,61,78,81,83,84,85,86,87,88,93,94,95,97,98,100],$V81=[5,8,11,18,25,28,30,31,34,36,37,40,42,43,44,48,53,54,59,60,61,78,81,83,84,85,86,87,88,93,94,95,97,98,100],$V91=[5,11,18,31,34,36,37,40,42,43,44,78,80,81,83,85,86,87,88,93,94,95,97,98,99,100],$Va1=[11,18,34,36,37,40,42,43,44,78,81,83,85,86,87,88,93,94,95,98,100],$Vb1=[1,205],$Vc1=[5,11,18,31,34,36,37,40,42,43,44,78,81,83,85,86,87,88,93,94,95,97,98,100],$Vd1=[28,30],$Ve1=[8,11,18,25,34,36,37,40,42,43,44,78,81,83,85,86,87,88,93,94,95,98,100],$Vf1=[8,18,24,45,52,62,63,64,65,66,67,69,71],$Vg1=[18,25,34,36,37,40,42,43,44],$Vh1=[1,284],$Vi1=[1,287],$Vj1=[1,288];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIAL":3,"CUERPO":4,"EOF":5,"IMPORTACIONES":6,"DECLARACION":7,"PYCOMA":8,"DECFUNCION":9,"DECSTRUCT":10,"LLAV_C":11,"CUERPOINTERNO":12,"ASIGNACION":13,"CONTROLES":14,"TRANSFERENCIAS":15,"LLAMADA":16,"TRY_CATCH":17,"ID":18,"IGUAL":19,"EXP":20,"MAS_MAS":21,"MENOS_MENOS":22,"LLAMADAS1":23,"PAR_A":24,"PAR_C":25,"LISTAPAR":26,"COR_A":27,"COR_C":28,"PUNTO":29,"COMA":30,"IMPORT":31,"LARCHIVOS":32,"ARCHIVO":33,"VAR":34,"DOSPUNTOS_IGUAL":35,"CONST":36,"GLOBAL":37,"TIPO":38,"LISTA_ID":39,"INTEGER":40,"COR_JUNTOS":41,"DOUBLE":42,"CHARACTER":43,"BOOLEAN":44,"MENOS":45,"MAS":46,"POTENCIA":47,"XOR":48,"POR":49,"DIV":50,"MODULO":51,"NOT":52,"OR":53,"AND":54,"MENOR":55,"MAYOR":56,"MENOR_IGUAL":57,"MAYOR_IGUAL":58,"IGUAL_IGUAL":59,"TRIPLE_IGUAL":60,"DISTINTO":61,"ENTERO":62,"DECIMAL":63,"TRUE":64,"FALSE":65,"STRING":66,"CHAR":67,"TIPOEXP":68,"STRC":69,"ARREGLO":70,"LLAV_A":71,"AMBITO":72,"CONTROL_IF":73,"CONTROL_WHILE":74,"CONTROL_SWITCH":75,"CONTROL_DO_WHILE":76,"CONTROL_FOR":77,"IF":78,"L_ELSE":79,"ELSE":80,"SWITCH":81,"L_CASE":82,"CASE":83,"DOSPUNTOS":84,"DEFAULT":85,"WHILE":86,"DO":87,"FOR":88,"CONTENIDOFOR":89,"CONTENIDOFOR1":90,"CONTENIDOFOR2":91,"CONTENIDOFOR3":92,"BREAK":93,"CONTINUE":94,"RETURN":95,"LISTA_PARAMETROS_FUNCION":96,"VOID":97,"TRY":98,"CATCH":99,"DEFINE":100,"AS":101,"LISTA_ATRIBUTOS":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PYCOMA",11:"LLAV_C",18:"ID",19:"IGUAL",21:"MAS_MAS",22:"MENOS_MENOS",24:"PAR_A",25:"PAR_C",27:"COR_A",28:"COR_C",29:"PUNTO",30:"COMA",31:"IMPORT",33:"ARCHIVO",34:"VAR",35:"DOSPUNTOS_IGUAL",36:"CONST",37:"GLOBAL",40:"INTEGER",41:"COR_JUNTOS",42:"DOUBLE",43:"CHARACTER",44:"BOOLEAN",45:"MENOS",46:"MAS",47:"POTENCIA",48:"XOR",49:"POR",50:"DIV",51:"MODULO",52:"NOT",53:"OR",54:"AND",55:"MENOR",56:"MAYOR",57:"MENOR_IGUAL",58:"MAYOR_IGUAL",59:"IGUAL_IGUAL",60:"TRIPLE_IGUAL",61:"DISTINTO",62:"ENTERO",63:"DECIMAL",64:"TRUE",65:"FALSE",66:"STRING",67:"CHAR",69:"STRC",71:"LLAV_A",78:"IF",80:"ELSE",81:"SWITCH",83:"CASE",84:"DOSPUNTOS",85:"DEFAULT",86:"WHILE",87:"DO",88:"FOR",93:"BREAK",94:"CONTINUE",95:"RETURN",97:"VOID",98:"TRY",99:"CATCH",100:"DEFINE",101:"AS"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[4,2],[4,3],[4,1],[4,2],[4,1],[4,2],[4,1],[4,2],[4,2],[4,2],[12,2],[12,1],[12,3],[12,2],[12,1],[12,2],[12,2],[12,3],[12,2],[12,1],[12,1],[12,2],[12,1],[12,2],[12,2],[12,3],[12,1],[12,2],[12,1],[12,2],[12,2],[12,2],[13,3],[13,2],[13,2],[13,3],[16,2],[16,4],[16,5],[16,3],[16,4],[16,4],[16,5],[23,3],[23,4],[23,5],[23,5],[23,6],[23,5],[23,6],[23,2],[26,3],[26,1],[6,3],[6,2],[32,1],[32,3],[7,4],[7,4],[7,4],[7,4],[7,2],[39,3],[39,1],[38,1],[38,2],[38,1],[38,2],[38,2],[38,1],[38,2],[38,1],[38,2],[38,1],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,2],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,4],[20,5],[20,1],[70,2],[70,3],[68,1],[68,1],[68,1],[68,1],[72,3],[72,2],[14,1],[14,1],[14,1],[14,1],[14,1],[73,5],[73,6],[79,7],[79,6],[79,2],[75,7],[75,6],[82,5],[82,4],[82,4],[82,3],[82,2],[82,3],[74,5],[76,6],[76,7],[77,5],[89,3],[90,2],[90,2],[90,1],[91,2],[91,1],[92,0],[92,1],[92,1],[15,2],[15,1],[15,1],[15,2],[15,2],[15,3],[9,6],[9,5],[9,6],[9,5],[9,8],[9,7],[96,4],[96,2],[17,8],[10,7],[10,6],[102,2],[102,4],[102,6],[102,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 var arbol=new AST($$[$0-1]); var a= {'errores':lista_errores,'arbol':arbol}; lista_errores=[];return a;
break;
case 2:
var a= {'errores':lista_errores}; lista_errores=[];return a;
break;
case 3: case 5: case 10: case 12: case 15: case 21: case 23: case 26: case 29: case 32: case 34:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 4: case 7: case 9: case 11: case 16: case 19: case 24: case 25: case 27: case 31: case 33: case 57:
this.$=[$$[$0]];
break;
case 6: case 17: case 22: case 30:
$$[$0-2].push($$[$0-1]);this.$=$$[$0-2];
break;
case 8: case 18: case 20: case 28:
this.$=[$$[$0-1]];
break;
case 13: case 14: case 35: case 36:
var nuevo=new ERRORES(_$[$0-1].first_line,_$[$0-1].first_column+1,"Error con  "+yytext,2); lista_errores.push(nuevo);this.$=null
break;
case 37:
this.$=new ASIGNACION(new IDENTIFICADOR($$[$0-2],this._$.first_line,this._$.first_column+1),$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 38:
this.$=new ASIGNACIONDECIC(new IDENTIFICADOR($$[$0-1],this._$.first_line,this._$.first_column+1),true,this._$.first_line,this._$.first_column+1);
break;
case 39:
this.$=new ASIGNACIONDECIC(new IDENTIFICADOR($$[$0-1],this._$.first_line,this._$.first_column+1),false,this._$.first_line,this._$.first_column+1);
break;
case 40:
this.$=new ASIGNACIONLLAMADA($$[$0-2],$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 41:
$$[$0].unshift(new ACCESOVARIABLE(new IDENTIFICADOR($$[$0-1],this._$.first_line,this._$.first_column+1),this._$.first_line,this._$.first_column+1));this.$=new ACCESO($$[$0],this._$.first_line,this._$.first_column+1);
break;
case 42:
$$[$0].unshift(new ACCESOFUNCION(new IDENTIFICADOR($$[$0-3],this._$.first_line,this._$.first_column+1),null,this._$.first_line,this._$.first_column+1));this.$=new ACCESO($$[$0],this._$.first_line);
break;
case 43:
$$[$0].unshift(new ACCESOFUNCION(new IDENTIFICADOR($$[$0-4],this._$.first_line,this._$.first_column+1),$$[$0-2],this._$.first_line,this._$.first_column+1));this.$=new ACCESO($$[$0],this._$.first_line,this._$.first_column+1);
break;
case 44:
this.$=new ACCESO([new ACCESOFUNCION(new IDENTIFICADOR($$[$0-2],this._$.first_line,this._$.first_column+1),null,this._$.first_line,this._$.first_column)],this._$.first_line,this._$.first_column+1)
break;
case 45:
this.$=new ACCESO([new ACCESOFUNCION(new IDENTIFICADOR($$[$0-3],this._$.first_line,this._$.first_column+1),$$[$0-1],this._$.first_line,this._$.first_column)],this._$.first_line,this._$.first_column+1);
break;
case 46:
this.$=new ACCESO([new ACCESOARRAY(new IDENTIFICADOR($$[$0-3],this._$.first_line,this._$.first_column+1),$$[$0-1],this._$.first_line,this._$.first_column+1)],this._$.first_line,this._$.first_column+1);
break;
case 47:
$$[$0].unshift(new ACCESOARRAY(new IDENTIFICADOR($$[$0-4],this._$.first_line,this._$.first_column+1),$$[$0-2],this._$.first_line,this._$.first_column+1));this.$=new ACCESO($$[$0],this._$.first_line,this._$.first_column+1);
break;
case 48:
$$[$0].unshift(new ACCESOATRIBUTO(new IDENTIFICADOR($$[$0-1],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column));this.$=$$[$0];
break;
case 49:
this.$=[new ACCESOFUNCION(new IDENTIFICADOR($$[$0-2],this._$.first_line,this._$.first_column+1),null,this._$.first_line,this._$.first_column+1)];
break;
case 50:
$$[$0].unshift(new ACCESOFUNCION(new IDENTIFICADOR($$[$0-3],this._$.first_line,this._$.first_column+1),null,this._$.first_line,this._$.first_column+1));this.$=$$[$0];
break;
case 51:
this.$=[new ACCESOFUNCION(new IDENTIFICADOR($$[$0-3],this._$.first_line,this._$.first_column+1),$$[$0-1],this._$.first_line,this._$.first_column+1)];
break;
case 52:
$$[$0].unshift(new ACCESOFUNCION(new IDENTIFICADOR($$[$0-4],this._$.first_line,this._$.first_column+1),$$[$0-2],this._$.first_line,this._$.first_column+1));this.$=$$[$0];
break;
case 53:
this.$=[new ACCESOARRAY(new IDENTIFICADOR($$[$0-3],this._$.first_line,this._$.first_column+1),$$[$0-1],this._$.first_line,this._$.first_column+1)];
break;
case 54:
$$[$0].unshift(new ACCESOARRAY(new IDENTIFICADOR($$[$0-4],this._$.first_line,this._$.first_column+1),$$[$0-2],this._$.first_line,this._$.first_column));this.$=$$[$0];
break;
case 55:
this.$=[new ACCESOATRIBUTO(new IDENTIFICADOR($$[$0],this._$.first_line,this._$.first_column),this._$.first_line,this._$.first_column)];
break;
case 56:
$$[$0].unshift($$[$0-2]);this.$=$$[$0];
break;
case 58:
this.$=new IMPORTACION($$[$0-1],this._$.first_line,this._$.first_column+1);
break;
case 59:
this.$=new IMPORTACION($$[$0],this._$.first_line,this._$.first_column+1);
break;
case 60: case 68:
this.$=[new IDENTIFICADOR($$[$0],this._$.first_line,this._$.first_column+1)];
break;
case 61:
$$[$0]=$$[$0].concat(new IDENTIFICADOR($$[$0-2],this._$.first_line,this._$.first_column+1));this.$=$$[$0];
break;
case 62:
this.$=new DECLARACION(new TIPOEXP(TIPO.VAR),[new IDENTIFICADOR($$[$0-2],this._$.first_line,this._$.first_column+1)],$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 63:
this.$=new DECLARACION(new TIPOEXP(TIPO.CONST),[new IDENTIFICADOR($$[$0-2],this._$.first_line,this._$.first_column+1)],$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 64:
this.$=new DECLARACION(new TIPOEXP(TIPO.GLOBAL),[new IDENTIFICADOR($$[$0-2],this._$.first_line,this._$.first_column+1)],$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 65:
this.$=new DECLARACION($$[$0-3],$$[$0-2],$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 66:
this.$=new DECLARACION($$[$0-1],$$[$0],null,this._$.first_line,this._$.first_column+1);
break;
case 67:
$$[$0-2].push(new IDENTIFICADOR($$[$0],this._$.first_line,this._$.first_column+1));this.$=$$[$0-2];
break;
case 69: case 113:
this.$=new TIPOEXP(TIPO.INTEGER);
break;
case 70:
var tipo=new TIPOEXP(TIPO.ARRAY);tipo.tipoarray=TIPO.INTEGER;this.$=tipo;
break;
case 71: case 114:
this.$=new TIPOEXP(TIPO.DOUBLE);
break;
case 72: case 73:
var tipo=new TIPOEXP(TIPO.ARRAY);tipo.tipoarray=TIPO.DOUBLE;this.$=tipo;
break;
case 74: case 115:
this.$=new TIPOEXP(TIPO.CHAR);
break;
case 75:
if($$[$0-1].toString().toLowerCase()=="string"){var tipo=new TIPOEXP(TIPO.ARRAY);tipo.tipoarray=TIPO.STRING;this.$=tipo;}else{var tipo=new TIPOEXP(TIPO.ARRAY);tipo.tipoarray=TIPO.STRUCT;this.$=tipo;}
break;
case 76:
if($$[$0].toString().toLowerCase()=="string"){this.$=new TIPOEXP(TIPO.STRING);}else{this.$=new TIPOEXP(TIPO.STRUCT,$$[$0]);}
break;
case 77:
var tipo=new TIPOEXP(TIPO.ARRAY);tipo.tipoarray=TIPO.BOOLEAN;this.$=tipo;
break;
case 78: case 116:
this.$=new TIPOEXP(TIPO.BOOLEAN);
break;
case 79:
this.$=new UNARIAS($$[$0],SIGNO.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 80:
this.$=new ARITMETICA($$[$0-2],$$[$0],SIGNO.SUMA,this._$.first_line,this._$.first_column+1);
break;
case 81:
this.$=new ARITMETICA($$[$0-2],$$[$0],SIGNO.RESTA,this._$.first_line,this._$.first_column+1);
break;
case 82: case 83:
this.$=new ARITMETICA($$[$0-2],$$[$0],SIGNO.POTENCIA,this._$.first_line,this._$.first_column+1);
break;
case 84:
this.$=new ARITMETICA($$[$0-2],$$[$0],SIGNO.MULTIPLICACION,this._$.first_line,this._$.first_column+1);
break;
case 85:
this.$=new ARITMETICA($$[$0-2],$$[$0],SIGNO.DIVISION,this._$.first_line,this._$.first_column+1);
break;
case 86:
this.$=new ARITMETICA($$[$0-2],$$[$0],SIGNO.MODULO,this._$.first_line,this._$.first_column+1);
break;
case 87:
this.$=new UNARIAS($$[$0],SIGNO.NOT,this._$.first_line,this._$.first_column+1);
break;
case 88:
this.$=new LOGICAS($$[$0-2],$$[$0],SIGNO.OR,this._$.first_line,this._$.first_column+1);
break;
case 89:
this.$=new LOGICAS($$[$0-2],$$[$0],SIGNO.AND,this._$.first_line,this._$.first_column+1);
break;
case 90:
this.$=new RELACIONALES($$[$0-2],$$[$0],SIGNO.MENOR,this._$.first_line,this._$.first_column+1);
break;
case 91:
this.$=new RELACIONALES($$[$0-2],$$[$0],SIGNO.MAYOR,this._$.first_line,this._$.first_column+1);
break;
case 92:
this.$=new RELACIONALES($$[$0-2],$$[$0],SIGNO.MENORI,this._$.first_line,this._$.first_column+1);
break;
case 93:
this.$=new RELACIONALES($$[$0-2],$$[$0],SIGNO.MAYORI,this._$.first_line,this._$.first_column+1);
break;
case 94:
this.$=new RELACIONALES($$[$0-2],$$[$0],SIGNO.IGUAL_IGUAL,this._$.first_line,this._$.first_column+1);
break;
case 95:
this.$=new RELACIONALES($$[$0-2],$$[$0],SIGNO.TRIPLE_IGUAL,this._$.first_line,this._$.first_column+1);
break;
case 96:
this.$=new RELACIONALES($$[$0-2],$$[$0],SIGNO.DISTINTO,this._$.first_line,this._$.first_column+1);
break;
case 97: case 117: case 145:
this.$=$$[$0-1];
break;
case 98:
this.$=new INCREDECRE(new IDENTIFICADOR($$[$0-1],this._$.first_line,this._$.first_column+1),true,this._$.first_line,this._$.first_column+1);
break;
case 99:
this.$=new INCREDECRE(new IDENTIFICADOR($$[$0-1],this._$.first_line,this._$.first_column+1),false,this._$.first_line,this._$.first_column+1);
break;
case 100:
this.$=new IDENTIFICADOR($$[$0],Number(this._$.first_line),Number(this._$.first_column+1));
break;
case 101:
this.$=new LITERAL(Number($$[$0]),new TIPOEXP(TIPO.INTEGER),this._$.first_line,this._$.first_column+1);
break;
case 102:
this.$=new LITERAL(Number($$[$0]),new TIPOEXP(TIPO.DOUBLE),this._$.first_line,this._$.first_column+1);
break;
case 103:
this.$=new LITERAL(true,new TIPOEXP(TIPO.BOOLEAN),this._$.first_line,this._$.first_column+1);
break;
case 104:
this.$=new LITERAL(false,new TIPOEXP(TIPO.BOOLEAN),this._$.first_line,this._$.first_column+1);
break;
case 105:
this.$=new LITERAL($$[$0],new TIPOEXP(TIPO.STRING),this._$.first_line,this._$.first_column+1);
break;
case 106:
this.$=new LITERAL($$[$0],new TIPOEXP(TIPO.CHAR),this._$.first_line,this._$.first_column+1);
break;
case 107: case 110: case 119: case 120: case 121: case 122: case 123: case 148: case 149:
this.$=$$[$0];
break;
case 108:
this.$=new CASTEO($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column+1);
break;
case 109:
this.$=new DECARRAY($$[$0-1],$$[$0-3],_$[$0-4].first_line,_$[$0-3].first_column+1);
break;
case 111:
this.$=new ARREGLOVALOR(null,_$[$0-1].first_line,_$[$0-1].first_column+1);
break;
case 112:
this.$=new ARREGLOVALOR($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column+1);
break;
case 118:
this.$=[]
break;
case 124:
this.$=new CONTROLIF($$[$0-2],$$[$0],null,this._$.first_line,this._$.first_column+1);
break;
case 125:
this.$=new CONTROLIF($$[$0-3],$$[$0-1],$$[$0],this._$.first_line,this._$.first_column+1)
break;
case 126:
$$[$0].unshift(new ELSEIF($$[$0-3],$$[$0-1],this._$.first_line,this._$.first_column+1));this.$=$$[$0];
break;
case 127:
this.$=[new ELSEIF($$[$0-2],$$[$0],this._$.first_line,this._$.first_column+1)];
break;
case 128:
this.$=[new ELSE($$[$0],this._$.first_line,this._$.first_column+1)];
break;
case 129:
this.$=new SWITCH($$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column);
break;
case 130:
this.$=new SWITCH($$[$0-3],null,this._$.first_line,this._$.first_column);
break;
case 131:
$$[$0].unshift(new CASE($$[$0-3],$$[$0-1],this._$.first_line,this._$.first_column+1));this.$=$$[$0];
break;
case 132:
this.$=[new CASE($$[$0-2],$$[$0],this._$.first_line,this._$.first_column+1)];
break;
case 133:
$$[$0].unshift(new CASE($$[$0-2],null,this._$.first_line,this._$.first_column+1));this.$=$$[$0];
break;
case 134:
this.$=[new CASE($$[$0-1],null,this._$.first_line,this._$.first_column+1)];
break;
case 135:
this.$=[new DEFAULT(null,this._$.first_line,this._$.first_column+1)];
break;
case 136:
this.$=[new DEFAULT($$[$0],this._$.first_line,this._$.first_column+1)]
break;
case 137:
this.$=new WHILE($$[$0-2],$$[$0],this._$.first_line,this._$.first_column+1);
break;
case 138:
this.$=new DO_WHILE($$[$0-4],$$[$0-1],this._$.first_line,this._$.first_column+1);
break;
case 139:
this.$=new DO_WHILE($$[$0-5],$$[$0-2],this._$.first_line,this._$.first_column+1);
break;
case 140:
this.$=new FOR($$[$0-2][0],$$[$0-2][1],$$[$0-2][2],$$[$0],this._$.first_line,this._$.first_column);
break;
case 141:
this.$=[$$[$0-2],$$[$0-1],$$[$0]];
break;
case 142: case 143:
this.$=$$[$0-1]
break;
case 144:
this.$=null
break;
case 146: case 147:
this.$=null;
break;
case 150:
this.$=new BREAK(this._$.first_line,_$[$0-1].first_column+1);
break;
case 151:
this.$=new BREAK(_$[$0].first_line,_$[$0].first_column+1);
break;
case 152:
this.$=new CONTINUE(_$[$0].first_line,_$[$0].first_column+1);
break;
case 153:
this.$=new CONTINUE(_$[$0-1].first_line,_$[$0-1].first_column+1)
break;
case 154:
this.$=new RETURN(null,_$[$0-1].first_line,_$[$0-1].first_column+1)
break;
case 155:
this.$=new RETURN($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column+1)
break;
case 156:
this.$=new DECFUNCION($$[$0-5],new IDENTIFICADOR($$[$0-4],this._$.first_line,this._$.first_column+1),$$[$0-2],$$[$0],false,this._$.first_line,this._$.first_column+1);
break;
case 157:
this.$=new DECFUNCION($$[$0-4],new IDENTIFICADOR($$[$0-3],this._$.first_line,this._$.first_column+1),null,$$[$0],false,this._$.first_line,this._$.first_column+1);
break;
case 158:
this.$=new DECFUNCION(new TIPOEXP(TIPO.VOID,null),new IDENTIFICADOR($$[$0-4],this._$.first_line,this._$.first_column+1),$$[$0-2],$$[$0],false,this._$.first_line,this._$.first_column+1);
break;
case 159:
this.$=new DECFUNCION(new TIPOEXP(TIPO.VOID),new IDENTIFICADOR($$[$0-3],this._$.first_line,this._$.first_column+1),null,$$[$0],false,this._$.first_line,this._$.first_column+1);
break;
case 162:
$$[$0].unshift(new PARAMETROS($$[$0-3],new IDENTIFICADOR($$[$0-2],this._$.first_line,this._$.first_column)));this.$=$$[$0];
break;
case 163:
this.$=[new PARAMETROS($$[$0-1],new IDENTIFICADOR($$[$0],this._$.first_line,this._$.first_column))];
break;
}
},
table: [{2:[1,8],3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,18:$V0,31:$V1,34:$V2,36:$V3,37:$V4,38:13,40:$V5,42:$V6,43:$V7,44:$V8,97:$V9,100:$Va},{1:[3]},{5:[1,21],6:22,7:23,9:24,10:25,18:$V0,31:$V1,34:$V2,36:$V3,37:$V4,38:13,40:$V5,42:$V6,43:$V7,44:$V8,97:$V9,100:$Va},{1:[2,2]},o($Vb,[2,4]),o($Vb,[2,7],{8:[1,26]}),o($Vb,[2,9]),o($Vb,[2,11]),{8:[1,27],11:[1,28]},{32:29,33:$Vc},{18:[1,31]},{18:[1,32]},{18:[1,33]},{18:[1,35],27:[1,36],39:34},{18:[1,37]},{18:[1,38]},o($Vd,[2,69],{41:[1,39]}),o($Vd,[2,71],{41:[1,40]}),o($Vd,[2,74],{41:[1,41]}),o($Vd,$Ve,{41:$Vf}),o($Vd,[2,78],{41:[1,43]}),{1:[2,1]},o($Vb,[2,3]),o($Vb,[2,5],{8:[1,44]}),o($Vb,[2,10]),o($Vb,[2,12]),o($Vb,[2,8]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,59],{8:[1,45]}),o($Vg,[2,60],{30:[1,46]}),{35:[1,47]},{35:[1,48]},{35:[1,49]},o($Vh,[2,66],{19:[1,50],30:[1,51]}),o([5,8,18,19,30,31,34,36,37,40,42,43,44,97,100],$Vi,{24:[1,52]}),{28:[1,53]},{24:[1,54]},{101:[1,55]},o($Vd,[2,70]),o($Vd,[2,72]),o($Vd,[2,73]),o($Vd,[2,75]),o($Vd,[2,77]),o($Vb,[2,6]),o($Vb,[2,58]),{32:56,33:$Vc},{16:68,18:$Vj,20:57,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:72,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:73,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:74,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{18:[1,75]},{18:$V0,25:[1,77],38:78,40:$V5,42:$V6,43:$V7,44:$V8,96:76},{18:[1,79]},{18:$V0,25:[1,81],38:78,40:$V5,42:$V6,43:$V7,44:$V8,96:80},{27:[1,82]},o($Vg,[2,61]),o($Vh,[2,62],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),{16:68,18:$Vj,20:99,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:100,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:101,24:$Vk,40:$VL,42:$VM,43:$VN,44:$VO,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:102,69:$Vt,70:70,71:$Vu},o($VP,[2,100],{23:109,21:[1,107],22:[1,108],24:$VQ,27:$VR,29:$VS}),o($VP,[2,101]),o($VP,[2,102]),o($VP,[2,103]),o($VP,[2,104]),o($VP,[2,105]),o($VP,[2,106]),o($VP,[2,107]),{40:$VL,42:$VM,43:$VN,44:$VO,68:113},o($VP,[2,110]),{11:[1,114],16:68,18:$Vj,20:116,24:$Vk,26:115,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},o($Vh,[2,63],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o($Vh,[2,64],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o($Vh,[2,65],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o([5,8,11,18,19,25,30,31,34,36,37,40,42,43,44,78,81,83,85,86,87,88,93,94,95,97,98,100],[2,67]),{25:[1,117]},{71:$VT,72:118},{18:[1,120]},{24:[1,121]},{25:[1,122]},{71:$VT,72:123},{18:$V0,38:125,40:$V5,42:$V6,43:$V7,44:$V8,102:124},{16:68,18:$Vj,20:126,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:127,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:128,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:129,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:130,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:131,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:132,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:133,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:134,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:135,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:136,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:137,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:138,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:139,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:140,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:141,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},o($VP,[2,79]),o($VP,[2,87]),{25:[1,142],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},{25:[1,143]},o($VU,[2,113]),o($VU,[2,114]),o($VU,[2,115]),o($VU,[2,116]),o($VP,[2,98]),o($VP,[2,99]),o($VV,[2,41]),{16:68,18:$Vj,20:116,24:$Vk,25:[1,144],26:145,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:146,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{18:[1,147]},{27:[1,148]},o($VP,[2,111]),{11:[1,149]},o($VW,[2,57],{30:[1,150],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),{71:$VT,72:151},o($Vb,[2,157]),{2:$VX,7:154,10:160,11:[1,153],12:152,13:155,14:156,15:157,16:158,17:159,18:$VY,34:$V2,36:$V3,37:$V4,38:162,40:$V5,42:$V6,43:$V7,44:$V8,73:164,74:165,75:166,76:167,77:168,78:$VZ,81:$V_,86:$V$,87:$V01,88:$V11,93:$V21,94:$V31,95:$V41,98:$V51,100:$Va},{25:[2,163],30:[1,178]},{18:$V0,25:[1,180],38:78,40:$V5,42:$V6,43:$V7,44:$V8,96:179},{71:$VT,72:181},o($Vb,[2,159]),{28:[1,182],30:[1,183]},{18:[1,184]},o($V61,[2,80],{47:$Vx,49:$Vz,50:$VA,51:$VB}),o($V61,[2,81],{47:$Vx,49:$Vz,50:$VA,51:$VB}),o($VP,[2,82]),o([5,8,11,18,25,28,30,31,34,36,37,40,42,43,44,48,78,81,83,84,85,86,87,88,93,94,95,97,98,100],[2,83],{45:$Vv,46:$Vw,47:$Vx,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o($V71,[2,84],{47:$Vx}),o($V71,[2,85],{47:$Vx}),o($V71,[2,86],{47:$Vx}),o([5,8,11,18,25,28,30,31,34,36,37,40,42,43,44,48,53,78,81,83,84,85,86,87,88,93,94,95,97,98,100],[2,88],{45:$Vv,46:$Vw,47:$Vx,49:$Vz,50:$VA,51:$VB,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o([5,8,11,18,25,28,30,31,34,36,37,40,42,43,44,48,53,54,78,81,83,84,85,86,87,88,93,94,95,97,98,100],[2,89],{45:$Vv,46:$Vw,47:$Vx,49:$Vz,50:$VA,51:$VB,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o($V81,[2,90],{45:$Vv,46:$Vw,47:$Vx,49:$Vz,50:$VA,51:$VB}),o($V81,[2,91],{45:$Vv,46:$Vw,47:$Vx,49:$Vz,50:$VA,51:$VB}),o($V81,[2,92],{45:$Vv,46:$Vw,47:$Vx,49:$Vz,50:$VA,51:$VB}),o($V81,[2,93],{45:$Vv,46:$Vw,47:$Vx,49:$Vz,50:$VA,51:$VB}),o($V81,[2,94],{45:$Vv,46:$Vw,47:$Vx,49:$Vz,50:$VA,51:$VB,55:$VE,56:$VF,57:$VG,58:$VH}),o($V81,[2,95],{45:$Vv,46:$Vw,47:$Vx,49:$Vz,50:$VA,51:$VB,55:$VE,56:$VF,57:$VG,58:$VH}),o($V81,[2,96],{45:$Vv,46:$Vw,47:$Vx,49:$Vz,50:$VA,51:$VB,55:$VE,56:$VF,57:$VG,58:$VH}),o($VP,[2,97]),{16:68,18:$Vj,20:185,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},o($VV,[2,44],{23:186,29:$VS}),{25:[1,187]},{28:[1,188],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},o($VV,[2,55],{23:189,24:[1,190],27:[1,191],29:$VS}),{16:68,18:$Vj,20:192,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},o($VP,[2,112]),{16:68,18:$Vj,20:116,24:$Vk,26:193,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},o($Vb,[2,156]),{7:195,10:201,11:[1,194],13:196,14:197,15:198,16:199,17:200,18:$VY,34:$V2,36:$V3,37:$V4,38:162,40:$V5,42:$V6,43:$V7,44:$V8,73:164,74:165,75:166,76:167,77:168,78:$VZ,81:$V_,86:$V$,87:$V01,88:$V11,93:$V21,94:$V31,95:$V41,98:$V51,100:$Va},o($V91,[2,118]),o($Va1,[2,16],{8:[1,202]}),o($Va1,[2,19],{8:[1,203]}),o($Va1,[2,24]),o($Va1,[2,25]),o($Va1,[2,27],{8:[1,204],19:$Vb1}),o($Va1,[2,31]),o($Va1,[2,33]),{8:[1,206],11:[1,207]},{18:[1,208],39:34},{18:$Ve,19:[1,209],21:[1,210],22:[1,211],23:109,24:$VQ,27:$VR,29:$VS,41:$Vf},o($Va1,[2,119]),o($Va1,[2,120]),o($Va1,[2,121]),o($Va1,[2,122]),o($Va1,[2,123]),o($Va1,[2,151],{8:[1,212]}),o($Va1,[2,152],{8:[1,213]}),{8:[1,214],16:68,18:$Vj,20:215,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{71:$VT,72:216},{24:[1,217]},{24:[1,218]},{24:[1,219]},{71:$VT,72:220},{24:[1,221]},{18:$V0,38:78,40:$V5,42:$V6,43:$V7,44:$V8,96:222},{25:[1,223]},{71:$VT,72:224},o($Vb,[2,158]),o($Vc1,[2,166],{8:[1,225]}),{18:$V0,38:226,40:$V5,42:$V6,43:$V7,44:$V8},o($Vd1,[2,167],{19:[1,227]}),o($VP,[2,108]),o($VV,[2,42]),o($VV,[2,45],{23:228,29:$VS}),o($VV,[2,46],{23:229,29:$VS}),o($VV,[2,48]),{16:68,18:$Vj,20:116,24:$Vk,25:[1,230],26:231,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:232,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{28:[1,233],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},o($VW,[2,56]),o($V91,[2,117]),o($Va1,[2,15],{8:[1,234]}),o($Va1,[2,21],{8:[1,235]}),o($Va1,[2,23]),o($Va1,[2,26]),o($Va1,[2,29],{8:[1,236],19:$Vb1}),o($Va1,[2,32]),o($Va1,[2,34]),o($Va1,[2,18]),o($Va1,[2,20]),o($Va1,[2,28]),{16:68,18:$Vj,20:237,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},o($Va1,[2,35]),o($Va1,[2,36]),o([8,11,18,19,25,30,34,36,37,40,42,43,44,78,81,83,85,86,87,88,93,94,95,98,100],$Vi),{16:68,18:$Vj,20:238,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},o($Ve1,[2,38]),o($Ve1,[2,39]),o($Va1,[2,150]),o($Va1,[2,153]),o($Va1,[2,154]),{8:[1,239],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},{99:[1,240]},{16:68,18:$Vj,20:241,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:242,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{16:68,18:$Vj,20:243,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{86:[1,244]},{7:247,8:[1,249],13:248,16:250,18:$VY,34:$V2,36:$V3,37:$V4,38:162,40:$V5,42:$V6,43:$V7,44:$V8,89:245,90:246},{25:[2,162]},{71:$VT,72:251},o($Vb,[2,161]),o($Vc1,[2,165]),{18:[1,252]},{16:68,18:$Vj,20:253,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},o($VV,[2,43]),o($VV,[2,47]),o($VV,[2,49],{23:254,29:$VS}),{25:[1,255]},{28:[1,256],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},o($VP,[2,109]),o($Va1,[2,17]),o($Va1,[2,22]),o($Va1,[2,30]),o($Ve1,[2,40],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o($Ve1,[2,37],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o($Va1,[2,155]),{24:[1,257]},{25:[1,258],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},{25:[1,259],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},{25:[1,260],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},{24:[1,261]},{25:[1,262]},{8:[1,265],16:68,18:$Vj,20:264,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu,91:263},{8:[1,266]},{8:[1,267]},o($Vf1,[2,144]),{19:$Vb1},o($Vb,[2,160]),o($Vd1,[2,168],{19:[1,268]}),o($Vd1,[2,170],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),o($VV,[2,50]),o($VV,[2,51],{23:269,29:$VS}),o($VV,[2,53],{23:270,29:$VS}),{18:[1,271]},{71:$VT,72:272},{71:$VT,72:273},{71:[1,274]},{16:68,18:$Vj,20:275,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{71:$VT,72:276},{7:279,13:278,16:250,18:$VY,25:[2,147],34:$V2,36:$V3,37:$V4,38:162,40:$V5,42:$V6,43:$V7,44:$V8,92:277},{8:[1,280],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},o($Vg1,[2,146]),o($Vf1,[2,142]),o($Vf1,[2,143]),{16:68,18:$Vj,20:281,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},o($VV,[2,52]),o($VV,[2,54]),{18:[1,282]},o($Va1,[2,124],{79:283,80:$Vh1}),o($Va1,[2,137]),{11:[1,286],82:285,83:$Vi1,85:$Vj1},{25:[1,289],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},o($Va1,[2,140]),{25:[2,141]},{25:[2,148]},{25:[2,149]},o($Vg1,[2,145]),o($Vd1,[2,169],{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK}),{25:[1,290]},o($Va1,[2,125]),{71:$VT,72:292,78:[1,291]},{11:[1,293]},o($Va1,[2,130]),{16:68,18:$Vj,20:294,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{84:[1,295]},o($Va1,[2,138],{8:[1,296]}),{71:$VT,72:297},{24:[1,298]},o($Va1,[2,128]),o($Va1,[2,129]),{45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,84:[1,299]},{2:$VX,7:154,10:160,11:[2,135],12:300,13:155,14:156,15:157,16:158,17:159,18:$VY,34:$V2,36:$V3,37:$V4,38:162,40:$V5,42:$V6,43:$V7,44:$V8,73:164,74:165,75:166,76:167,77:168,78:$VZ,81:$V_,86:$V$,87:$V01,88:$V11,93:$V21,94:$V31,95:$V41,98:$V51,100:$Va},o($Va1,[2,139]),o($Va1,[2,164]),{16:68,18:$Vj,20:301,24:$Vk,45:$Vl,52:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,69:$Vt,70:70,71:$Vu},{2:$VX,7:154,10:160,11:[2,134],12:302,13:155,14:156,15:157,16:158,17:159,18:$VY,34:$V2,36:$V3,37:$V4,38:162,40:$V5,42:$V6,43:$V7,44:$V8,73:164,74:165,75:166,76:167,77:168,78:$VZ,81:$V_,82:303,83:$Vi1,85:$Vj1,86:$V$,87:$V01,88:$V11,93:$V21,94:$V31,95:$V41,98:$V51,100:$Va},{7:195,10:201,11:[2,136],13:196,14:197,15:198,16:199,17:200,18:$VY,34:$V2,36:$V3,37:$V4,38:162,40:$V5,42:$V6,43:$V7,44:$V8,73:164,74:165,75:166,76:167,77:168,78:$VZ,81:$V_,86:$V$,87:$V01,88:$V11,93:$V21,94:$V31,95:$V41,98:$V51,100:$Va},{25:[1,304],45:$Vv,46:$Vw,47:$Vx,48:$Vy,49:$Vz,50:$VA,51:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK},{7:195,10:201,11:[2,132],13:196,14:197,15:198,16:199,17:200,18:$VY,34:$V2,36:$V3,37:$V4,38:162,40:$V5,42:$V6,43:$V7,44:$V8,73:164,74:165,75:166,76:167,77:168,78:$VZ,81:$V_,82:305,83:$Vi1,85:$Vj1,86:$V$,87:$V01,88:$V11,93:$V21,94:$V31,95:$V41,98:$V51,100:$Va},{11:[2,133]},{71:$VT,72:306},{11:[2,131]},o($Va1,[2,127],{79:307,80:$Vh1}),o($Va1,[2,126])],
defaultActions: {3:[2,2],21:[2,1],222:[2,162],277:[2,141],278:[2,148],279:[2,149],303:[2,133],305:[2,131]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var cadena="";
    var tam=0;

    var lista_errores=[];
    const ERRORES=require('../build/Reportes/Errores.js').Errores;
    const LITERAL=require('../build/Expresion/Literal.js').Literal;
    const IDENTIFICADOR=require('../build/Expresion/Identificador.js').Identificador;
    const IDENTIFICADORARRAY=require('../build/Expresion/IdentificadorArray.js').IdentificadorArray;
    const IMPORTACION=require('../build/Instruccion/Importaciones.js').Importacion;
    const LINKEDLIST=require('../build/Global/LinkedList.js').Lista;
    const AST=require('../build/AST/AST.js').AST;
    const ARITMETICA=require('../build/Operaciones/Aritmetica.js').Aritmetica;
    const SIGNO=require('../build/Operaciones/Signo.js').Signo;
    const TIPOEXP=require('../build/Expresion/TipoExp.js').TipoExp;
    const TIPO=require('../build/Expresion/TipoExp.js').Tipo;
    const DECLARACION=require('../build/Instruccion/Declaracion.js').Declaracion;
    const ASIGNACION=require('../build/Instruccion/Asignacion.js').Asignacion;
    const ASIGNACIONDECIC=require('../build/Instruccion/AsignacionDECIC.js').AsignacionDECIC;
    const ASIGNACIONARRAY=require('../build/Instruccion/AsignacionArray.js').AsignacionArray;
    const ASIGNACIONLLAMADA=require('../build/Instruccion/AsignacionLlamada.js').AsignacionLlamada;
    const ACCESOARRAY=require('../build/Expresion/AccesoArray.js').AccesoArray;
    const ACCESOVARIABLE=require('../build/Expresion/AccesoVariable.js').AccesoVariable;
    const ACCESO=require('../build/Expresion/Acceso.js').Acceso;
    const ACCESOFUNCION=require('../build/Expresion/AccesoFuncion.js').AccesoFuncion;
    const ACCESOATRIBUTO=require('../build/Expresion/AccesoAtributo.js').AccesoAtributo;
    const UNARIAS=require('../build/Expresion/Unaria.js').Unaria;
    const LOGICAS=require('../build/Expresion/Logicas.js').Logica;
    const RELACIONALES=require('../build/Expresion/Relacionales.js').Relacionales;
    const INCREDECRE=require('../build/Expresion/IncreDecre.js').IncreDecre;
    const CASTEO=require('../build/Expresion/Casteo.js').Casteo;
    const DECFUNCION=require('../build/Instruccion/DecFuncion.js').DecFuncion;
    const PARAMETROS=require('../build/Instruccion/Parametros.js').Parametros;
    const CONTROLIF=require('../build/Controles/ControlIF.js').ControlIF;
    const ELSE=require('../build/Controles/Else.js').Else;
    const ELSEIF=require('../build/Controles/ElseIF.js').ElseIF;
    const WHILE=require('../build/Controles/While.js').While;
    const DO_WHILE=require('../build/Controles/Do_While.js').Do_While;
    const SWITCH=require('../build/Controles/Switch.js').Switch;
    const CASE=require('../build/Controles/Case.js').Case;
    const DEFAULT=require('../build/Controles/Default.js').Default;
    const FOR=require('../build/Controles/For.js').For;
    const BREAK=require('../build/Controles/Break.js').Break;
    const CONTINUE=require('../build/Controles/Continue.js').Continue;
    const RETURN=require('../build/Expresion/Return.js').Return;
    const DECARRAY=require('../build/Expresion/DecArray.js').DecArray;
    const ARREGLOVALOR=require('../build/Expresion/ArregloValor.js').ArregloValor;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*espacios*/
break;
case 1:/* COMENTARIO 2*/
break;
case 2:/*cOMENTARIO*/
break;
case 3:cadena=""; this.begin("string");
break;
case 4: return "CHARACTER";
break;
case 5: return "DOSPUNTOS_IGUAL";
break;
case 6: return "DOSPUNTOS";
break;
case 7: cadena="";this.begin("char");
break;
case 8: return "PYCOMA";
break;
case 9: return "PUNTO";
break;
case 10: return "MODULO";
break;
case 11: return "POTENCIA";
break;
case 12: return "XOR";
break;
case 13: return "OR";
break;
case 14: return "AND";
break;
case 15: return "TRIPLE_IGUAL";
break;
case 16: return "DISTINTO";
break;
case 17: return "NOT";
break;
case 18: return "IGUAL_IGUAL";
break;
case 19: return "MENOR_IGUAL";
break;
case 20: return "MAYOR_IGUAL";
break;
case 21: return "MENOR";
break;
case 22: return "MAYOR";
break;
case 23: return "IGUAL";
break;
case 24: return "COR_JUNTOS";
break;
case 25: return "COR_A";
break;
case 26: return "COR_C";
break;
case 27: return "LLAV_C";
break;
case 28: return "LLAV_A";
break;
case 29: return "PAR_A";
break;
case 30: return "PAR_C";
break;
case 31: return "COMA";
break;
case 32: return "POR";
break;
case 33: return "DIV";
break;
case 34: return "MENOS_MENOS";
break;
case 35: return "MENOS";
break;
case 36: return "MAS_MAS";
break;
case 37: return "MAS";
break;
case 38: return "BOOLEAN";
break;
case 39: return "DO";
break;
case 40: return "WHILE";
break;
case 41: return "BREAK";
break;
case 42: return "ELSE";
break;
case 43: return "GLOBAL";
break;
case 44: return "CHAR";
break;
case 45: return "THROW";
break;
case 46: return "STRC";
break;
case 47: return "FOR";
break;
case 48: return "DEFAULT";
break;
case 49: return "IF";
break;
case 50: return "CONST";
break;
case 51: return "DOUBLE";
break;
case 52: return "CATCH";
break;
case 53: return "AS";
break;
case 54: return "VOID";
break;
case 55: return "RETURN";
break;
case 56: return "CASE";
break;
case 57: return "VAR";
break;
case 58: return "INTEGER";
break;
case 59: return "TRY";
break;
case 60: return "DEFINE";
break;
case 61: return "CONTINUE";
break;
case 62: return "SWITCH";
break;
case 63: return "FALSE";
break;
case 64: return "TRUE";
break;
case 65: return "IMPORT";
break;
case 66: return "NULL"; 
break;
case 67: return "DECIMAL";
break;
case 68: return "ENTERO";
break;
case 69: return "ID";
break;
case 70: return "ARCHIVO";
break;
case 71:/*Enter*/
break;
case 72:/*Espacios en blanco*/
break;
case 73:this.begin("INITIAL");yy_.yytext=cadena;return "STRING";
break;
case 74:cadena+="\"";
break;
case 75:cadena+="\\";
break;
case 76:cadena+="\n";
break;
case 77:cadena+="\r";
break;
case 78:cadena+="\t";
break;
case 79:cadena+=" ";
break;
case 80:cadena+=yy_.yytext;
break;
case 81:this.begin("INITIAL");/*String sin finalizar reportar error*/
break;
case 82:this.begin("INITIAL");/*String sin finalizar*/
break;
case 83:this.begin("INITIAL");if(tam==1){tam=0;yy_.yytext=cadena;return "CHAR";}else{var nuevo=new ERRORES(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"Formato incorrecto para char",1);lista_errores.push(nuevo);}
break;
case 84:cadena+='\"';tam++;
break;
case 85:cadena+='\\';tam++;
break;
case 86:cadena+='\n';tam++;
break;
case 87:cadena+='\t';tam++;
break;
case 88:cadena+='\r';tam++;
break;
case 89:cadena+='\0';tam++;
break;
case 90:cadena+=yy_.yytext;tam++;
break;
case 91:this.begin("INITIAL");/*Char sin finalizar*/
break;
case 92:this.begin("INITIAL");/*Char sin finalizar*/
break;
case 93:return "EOF";
break;
case 94:var nuevo=new ERRORES(yy_.yylloc.first_line,yy_.yylloc.first_column+1,"Caracter invalido: "+yy_.yytext,1); lista_errores.push(nuevo);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/i,/^(?:(\/\/.*))/i,/^(?:("))/i,/^(?:(char\b))/i,/^(?:(:=))/i,/^(?:(:))/i,/^(?:('))/i,/^(?:(;))/i,/^(?:(\.))/i,/^(?:(%))/i,/^(?:(\^\^))/i,/^(?:(\^))/i,/^(?:(\|\|))/i,/^(?:(&&))/i,/^(?:(===))/i,/^(?:(!=))/i,/^(?:(!))/i,/^(?:(==))/i,/^(?:(<=))/i,/^(?:(>=))/i,/^(?:(<))/i,/^(?:(>))/i,/^(?:(=))/i,/^(?:(\[\]))/i,/^(?:(\[))/i,/^(?:(\]))/i,/^(?:(\}))/i,/^(?:(\{))/i,/^(?:(\())/i,/^(?:(\)))/i,/^(?:(,))/i,/^(?:(\*))/i,/^(?:(\/))/i,/^(?:(--))/i,/^(?:(-))/i,/^(?:(\+\+))/i,/^(?:(\+))/i,/^(?:(boolean\b))/i,/^(?:(do\b))/i,/^(?:(while\b))/i,/^(?:(break\b))/i,/^(?:(else\b))/i,/^(?:(global\b))/i,/^(?:{CHAR})/i,/^(?:(throw\b))/i,/^(?:(strc\b))/i,/^(?:(for\b))/i,/^(?:(default\b))/i,/^(?:(if\b))/i,/^(?:(const\b))/i,/^(?:(double\b))/i,/^(?:(catch\b))/i,/^(?:(as\b))/i,/^(?:(void\b))/i,/^(?:(return\b))/i,/^(?:(case\b))/i,/^(?:(var\b))/i,/^(?:(integer\b))/i,/^(?:(try\b))/i,/^(?:(define\b))/i,/^(?:(continue\b))/i,/^(?:(switch\b))/i,/^(?:(false\b))/i,/^(?:(true\b))/i,/^(?:(import\b))/i,/^(?:(null\b))/i,/^(?:([0-9]+(\.[0-9]+)\b))/i,/^(?:([0-9]+\b))/i,/^(?:([A-Za-zñÑ_][_0-9A-Za-zñÑ]*))/i,/^(?:(([a-zA-Z0-9_\\.\-\(\):])+(.j)))/i,/^(?:((\r|\n|\r\n)))/i,/^(?:((\s\t\f\t)))/i,/^(?:("))/i,/^(?:(\\"))/i,/^(?:(\\\\))/i,/^(?:(\\n))/i,/^(?:(\\r))/i,/^(?:(\\t))/i,/^(?:\s+)/i,/^(?:.)/i,/^(?:((\r|\n|\r\n)))/i,/^(?:$)/i,/^(?:('))/i,/^(?:(\\"))/i,/^(?:(\\\\))/i,/^(?:(\\n))/i,/^(?:(\\t))/i,/^(?:(\\r))/i,/^(?:(\\0))/i,/^(?:.)/i,/^(?:((\r|\n|\r\n)))/i,/^(?:$)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"char":{"rules":[83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true},"string":{"rules":[73,74,75,76,77,78,79,80,81,82,93,94],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


